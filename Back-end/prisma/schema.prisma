generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  passwordHash  String
  role          Role           @default(user)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  prompts       Prompt[]
  conversations Conversation[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  expiresAt  DateTime
  revokedAt  DateTime?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model Prompt {
  id          String   @id @default(uuid())
  title       String
  content     String
  description String?
  tags        String?
  isPublic    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usageCount  Int      @default(0)

  @@index([userId])
  @@index([isPublic])
}

model Conversation {
  id        String    @id @default(uuid())
  title     String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@index([userId])
}

model Message {
  id             String       @id @default(uuid())
  role           String       // 'user' ou 'assistant'
  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}
